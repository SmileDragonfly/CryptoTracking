// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: QueryDB.sql

package sqlc

import (
	"context"
	"database/sql"
)

const delete10MinBUSDPercent = `-- name: Delete10MinBUSDPercent :exec
DELETE FROM tblBUSD10MinPercent
`

func (q *Queries) Delete10MinBUSDPercent(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, delete10MinBUSDPercent)
	return err
}

const delete15MinBUSDPercent = `-- name: Delete15MinBUSDPercent :exec
DELETE FROM tblBUSD15MinPercent
`

func (q *Queries) Delete15MinBUSDPercent(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, delete15MinBUSDPercent)
	return err
}

const delete1MinBUSDPercent = `-- name: Delete1MinBUSDPercent :exec
DELETE FROM tblBUSD1MinPercent
`

func (q *Queries) Delete1MinBUSDPercent(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, delete1MinBUSDPercent)
	return err
}

const delete30MinBUSDPercent = `-- name: Delete30MinBUSDPercent :exec
DELETE FROM tblBUSD30MinPercent
`

func (q *Queries) Delete30MinBUSDPercent(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, delete30MinBUSDPercent)
	return err
}

const delete5MinBUSDPercent = `-- name: Delete5MinBUSDPercent :exec
DELETE FROM tblBUSD5MinPercent
`

func (q *Queries) Delete5MinBUSDPercent(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, delete5MinBUSDPercent)
	return err
}

const delete60MinBUSDPercent = `-- name: Delete60MinBUSDPercent :exec
DELETE FROM tblBUSD60MinPercent
`

func (q *Queries) Delete60MinBUSDPercent(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, delete60MinBUSDPercent)
	return err
}

const get10MinAgoBUSDPrice = `-- name: Get10MinAgoBUSDPrice :one
SELECT "price" FROM tblBUSDPrice WHERE "time" > (NOW() - INTERVAL '601 seconds') ORDER BY "time" ASC LIMIT 1
`

func (q *Queries) Get10MinAgoBUSDPrice(ctx context.Context) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, get10MinAgoBUSDPrice)
	var price sql.NullString
	err := row.Scan(&price)
	return price, err
}

const get15MinAgoBUSDPrice = `-- name: Get15MinAgoBUSDPrice :one
SELECT "price" FROM tblBUSDPrice WHERE "time" > (NOW() - INTERVAL '901 seconds') ORDER BY "time" ASC LIMIT 1
`

func (q *Queries) Get15MinAgoBUSDPrice(ctx context.Context) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, get15MinAgoBUSDPrice)
	var price sql.NullString
	err := row.Scan(&price)
	return price, err
}

const get1MinAgoBUSDPrice = `-- name: Get1MinAgoBUSDPrice :one
SELECT "price" FROM tblBUSDPrice WHERE "time" > (NOW() - INTERVAL '61 seconds') ORDER BY "time" ASC LIMIT 1
`

func (q *Queries) Get1MinAgoBUSDPrice(ctx context.Context) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, get1MinAgoBUSDPrice)
	var price sql.NullString
	err := row.Scan(&price)
	return price, err
}

const get30MinAgoBUSDPrice = `-- name: Get30MinAgoBUSDPrice :one
SELECT "price" FROM tblBUSDPrice WHERE "time" > (NOW() - INTERVAL '1801 seconds') ORDER BY "time" ASC LIMIT 1
`

func (q *Queries) Get30MinAgoBUSDPrice(ctx context.Context) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, get30MinAgoBUSDPrice)
	var price sql.NullString
	err := row.Scan(&price)
	return price, err
}

const get5MinAgoBUSDPrice = `-- name: Get5MinAgoBUSDPrice :one
SELECT "price" FROM tblBUSDPrice WHERE "time" > (NOW() - INTERVAL '301 seconds') ORDER BY "time" ASC LIMIT 1
`

func (q *Queries) Get5MinAgoBUSDPrice(ctx context.Context) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, get5MinAgoBUSDPrice)
	var price sql.NullString
	err := row.Scan(&price)
	return price, err
}

const get60MinAgoBUSDPrice = `-- name: Get60MinAgoBUSDPrice :one
SELECT "price" FROM tblBUSDPrice WHERE "time" > (NOW() - INTERVAL '3601 seconds') ORDER BY "time" ASC LIMIT 1
`

func (q *Queries) Get60MinAgoBUSDPrice(ctx context.Context) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, get60MinAgoBUSDPrice)
	var price sql.NullString
	err := row.Scan(&price)
	return price, err
}

const getLastestBUSDPrice = `-- name: GetLastestBUSDPrice :one
SELECT "price" FROM tblBUSDPrice ORDER BY "time" DESC LIMIT 1
`

func (q *Queries) GetLastestBUSDPrice(ctx context.Context) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getLastestBUSDPrice)
	var price sql.NullString
	err := row.Scan(&price)
	return price, err
}

const insert10MinBUSDPercent = `-- name: Insert10MinBUSDPercent :exec
INSERT INTO tblBUSD10MinPercent ("symbol", "price", "prevprice", "percent") VALUES ($1, $2, $3, $4)
`

type Insert10MinBUSDPercentParams struct {
	Symbol    sql.NullString
	Price     sql.NullFloat64
	Prevprice sql.NullFloat64
	Percent   sql.NullFloat64
}

func (q *Queries) Insert10MinBUSDPercent(ctx context.Context, arg Insert10MinBUSDPercentParams) error {
	_, err := q.db.ExecContext(ctx, insert10MinBUSDPercent,
		arg.Symbol,
		arg.Price,
		arg.Prevprice,
		arg.Percent,
	)
	return err
}

const insert15MinBUSDPercent = `-- name: Insert15MinBUSDPercent :exec
INSERT INTO tblBUSD15MinPercent ("symbol", "price", "prevprice", "percent") VALUES ($1, $2, $3, $4)
`

type Insert15MinBUSDPercentParams struct {
	Symbol    sql.NullString
	Price     sql.NullFloat64
	Prevprice sql.NullFloat64
	Percent   sql.NullFloat64
}

func (q *Queries) Insert15MinBUSDPercent(ctx context.Context, arg Insert15MinBUSDPercentParams) error {
	_, err := q.db.ExecContext(ctx, insert15MinBUSDPercent,
		arg.Symbol,
		arg.Price,
		arg.Prevprice,
		arg.Percent,
	)
	return err
}

const insert1MinBUSDPercent = `-- name: Insert1MinBUSDPercent :exec
INSERT INTO tblBUSD1MinPercent ("symbol", "price", "prevprice", "percent") VALUES ($1, $2, $3, $4)
`

type Insert1MinBUSDPercentParams struct {
	Symbol    sql.NullString
	Price     sql.NullFloat64
	Prevprice sql.NullFloat64
	Percent   sql.NullFloat64
}

func (q *Queries) Insert1MinBUSDPercent(ctx context.Context, arg Insert1MinBUSDPercentParams) error {
	_, err := q.db.ExecContext(ctx, insert1MinBUSDPercent,
		arg.Symbol,
		arg.Price,
		arg.Prevprice,
		arg.Percent,
	)
	return err
}

const insert30MinBUSDPercent = `-- name: Insert30MinBUSDPercent :exec
INSERT INTO tblBUSD30MinPercent ("symbol", "price", "prevprice", "percent") VALUES ($1, $2, $3, $4)
`

type Insert30MinBUSDPercentParams struct {
	Symbol    sql.NullString
	Price     sql.NullFloat64
	Prevprice sql.NullFloat64
	Percent   sql.NullFloat64
}

func (q *Queries) Insert30MinBUSDPercent(ctx context.Context, arg Insert30MinBUSDPercentParams) error {
	_, err := q.db.ExecContext(ctx, insert30MinBUSDPercent,
		arg.Symbol,
		arg.Price,
		arg.Prevprice,
		arg.Percent,
	)
	return err
}

const insert5MinBUSDPercent = `-- name: Insert5MinBUSDPercent :exec
INSERT INTO tblBUSD5MinPercent ("symbol", "price", "prevprice", "percent") VALUES ($1, $2, $3, $4)
`

type Insert5MinBUSDPercentParams struct {
	Symbol    sql.NullString
	Price     sql.NullFloat64
	Prevprice sql.NullFloat64
	Percent   sql.NullFloat64
}

func (q *Queries) Insert5MinBUSDPercent(ctx context.Context, arg Insert5MinBUSDPercentParams) error {
	_, err := q.db.ExecContext(ctx, insert5MinBUSDPercent,
		arg.Symbol,
		arg.Price,
		arg.Prevprice,
		arg.Percent,
	)
	return err
}

const insert60MinBUSDPercent = `-- name: Insert60MinBUSDPercent :exec
INSERT INTO tblBUSD60MinPercent ("symbol", "price", "prevprice", "percent") VALUES ($1, $2, $3, $4)
`

type Insert60MinBUSDPercentParams struct {
	Symbol    sql.NullString
	Price     sql.NullFloat64
	Prevprice sql.NullFloat64
	Percent   sql.NullFloat64
}

func (q *Queries) Insert60MinBUSDPercent(ctx context.Context, arg Insert60MinBUSDPercentParams) error {
	_, err := q.db.ExecContext(ctx, insert60MinBUSDPercent,
		arg.Symbol,
		arg.Price,
		arg.Prevprice,
		arg.Percent,
	)
	return err
}

const insertBUSDPrice = `-- name: InsertBUSDPrice :exec
INSERT INTO tblBUSDPrice ("price") VALUES ($1)
`

func (q *Queries) InsertBUSDPrice(ctx context.Context, price sql.NullString) error {
	_, err := q.db.ExecContext(ctx, insertBUSDPrice, price)
	return err
}
